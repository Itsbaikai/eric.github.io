<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>笔试错题</title>
      <link href="/eric000.github.io/2024/07/27/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98/"/>
      <url>/eric000.github.io/2024/07/27/%E7%AC%94%E8%AF%95%E9%94%99%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>1.HTTPS协议通过使用哪些机制来确保通信的安全性（）</p><p>A 加密和身份验证</p><p>2.ETag用于标识资源的唯一标识符，它可以用于（）</p><p>A 验证资源是否发生变化</p><p>3.系统中现有一个任务进程在11:30到达系统，如果在14:30开始运行这个任务进程，其运行时间为3小时，现求这个任务进程的响应比为（）。答案：2</p><p>解析：响应比&#x3D;1+等待时间&#x2F;执行时间</p><p>4.策略模式通过定义一系列算法（在这里是运输方式），封装每一个算法，并使它们可以相互替换，特别适合于有多种类似行为或策略的系统。</p><p>工厂方法模式是一种创建型设计模式，它定义了一个用于创建对象的接口，但允许子类决定实例化哪一个类。这通常用于当一个类不能预见需要创建的对象的具体类时。</p><p>桥接模式是一种结构型设计模式，它将抽象部分与其实现部分分离，使它们可以独立变化。它的目的是“将抽象化和实现化脱耦，使得二者可以独立变化”。</p><p>适配器模式是一种结构型设计模式，它将一个类的接口转换成客户期望的另一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p>5.代码需要经过一系列步骤编译成机器指令，根据完成任务不同，可以将编译器的组成部分划分为前端与后端。下列选项是编译器前端在编译源程序时编译的顺序，正确的是（）</p><p>A 词法分析器-&gt;语法分析器-&gt;中间代码生成器</p><p>6.下列选项中只要其中一个表中存在匹配，则返回行的SQL JOIN的 类型是（）。</p><p>D FULL JOIN</p>]]></content>
      
      
      <categories>
          
          <category> 笔试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/eric000.github.io/2024/07/26/%E8%B4%AA%E5%BF%83/"/>
      <url>/eric000.github.io/2024/07/26/%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一文读懂贪心算法"><a href="#一文读懂贪心算法" class="headerlink" title="一文读懂贪心算法"></a>一文读懂贪心算法</h1><h2 id="概念及使用"><a href="#概念及使用" class="headerlink" title="概念及使用"></a>概念及使用</h2><p>贪心算法或贪心思想采用贪心的策略，保证每次操作都是<strong>局部最优</strong>，从而使最后得到的结果是<strong>全局最优</strong>的</p><p>通常不使用回溯</p><p><strong>适用条件：</strong><br>1.问题具有最优子结构性质：问题的最优解可以通过子问题的最优解推导得到。<br>2.贪心选择性质：每一步的选择都是当前状态下的最优解，即局部最优。</p><p><strong>优缺点：</strong><br>优点： 算法简单、高效，适用于一些问题，尤其是最优子结构和贪心选择性质明显的情况。<br>缺点： 不适用于所有问题，可能得不到全局最优解，只能得到局部最优解或者近似最优解。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h3><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/Itsbaikai/eric000.github.io/main/images/fenpei.jpg" class="lazyload-img">        </sapn>      </p><p>解题思路：</p><p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/Itsbaikai/eric000.github.io/main/images/fenpeitijie.jpg" class="lazyload-img">        </sapn>      </p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="type">int</span> g[], <span class="type">int</span> gSize, <span class="type">int</span> s[], <span class="type">int</span> sSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对孩子的饥饿度和饼干的大小进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(g, g + gSize);</span><br><span class="line">    <span class="built_in">sort</span>(s, s + sSize);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> childIndex = <span class="number">0</span>; <span class="comment">// 孩子的索引</span></span><br><span class="line">    <span class="type">int</span> cookieIndex = <span class="number">0</span>; <span class="comment">// 饼干的索引</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历饥饿度和饼干大小，尝试满足孩子</span></span><br><span class="line">    <span class="keyword">while</span> (childIndex &lt; gSize &amp;&amp; cookieIndex &lt; sSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[cookieIndex] &gt;= g[childIndex]) &#123;</span><br><span class="line">            <span class="comment">// 当前饼干可以满足当前孩子的饥饿度</span></span><br><span class="line">            childIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无论是否满足孩子，饼干索引都需要移动</span></span><br><span class="line">        cookieIndex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> childIndex; <span class="comment">// 最终满足的孩子数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> g[] = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 孩子的饥饿度</span></span><br><span class="line">    <span class="type">int</span> s[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 饼干的大小</span></span><br><span class="line">    <span class="type">int</span> gSize = <span class="built_in">sizeof</span>(g) / <span class="built_in">sizeof</span>(g[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> sSize = <span class="built_in">sizeof</span>(s) / <span class="built_in">sizeof</span>(s[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">findContentChildren</span>(g, gSize, s, sSize);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最多有&quot;</span> &lt;&lt; result &lt;&lt; <span class="string">&quot;个孩子可以吃饱。&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="【深基12-例1】部分背包问题"><a href="#【深基12-例1】部分背包问题" class="headerlink" title="【深基12.例1】部分背包问题"></a>【深基12.例1】部分背包问题</h3><p>链接：<a href="https://www.luogu.com.cn/problem/P2240">https://www.luogu.com.cn/problem/P2240</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 $N(N \le 100)$ 堆金币，第 $i$ 堆金币的总重量和总价值分别是 $m_i,v_i(1\le m_i,v_i \le 100)$。阿里巴巴有一个承重量为 $T(T \le 1000)$ 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数 $N,T$。</p><p>接下来 $N$ 行，每行两个整数 $m_i,v_i$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个实数表示答案，输出两位小数</p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 50</span><br><span class="line">10 60</span><br><span class="line">20 100</span><br><span class="line">30 120</span><br><span class="line">15 45</span><br></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">240.00</span><br></pre></td></tr></table></figure><p>解题思路：使用贪心算法那首先想到金币按照价值的高低排序，先装价值高的。又因为是可以分割的，可以知道应该以价格的单位价值为分类标准，所以在获取输入时候就可以把单位价值计算出来。<br>又因为金币的性质很多，所以用到结构体，排序用sort函数，定义compare。<br>那就循环遍历数组，依次累加价值，直到价值超过了背包。超过背包也不能直接return，要看是不是有剩余的价值（也就是拆开的金子）<br>最后就可以直接输出了 代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">GoldPile</span> &#123;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">double</span> unit_value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(GoldPile a, GoldPile b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.unit_value &gt; b.unit_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> N, T;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">    GoldPile gold[N];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        cin &gt;&gt; gold[i].weight &gt;&gt; gold[i].value;</span><br><span class="line">        gold[i].unit_value = (<span class="type">double</span>)gold[i].value / gold[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(gold, gold + N, compare);</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> max_value = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">int</span> current_weight = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N &amp;&amp; current_weight &lt; T; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current_weight + gold[i].weight &lt;= T) &#123;</span><br><span class="line">            current_weight += gold[i].weight;</span><br><span class="line">            max_value += gold[i].value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> remaining_weight = T - current_weight;</span><br><span class="line">            max_value += remaining_weight * gold[i].unit_value;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; max_value &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="凌乱的yyy-线段覆盖"><a href="#凌乱的yyy-线段覆盖" class="headerlink" title="凌乱的yyy &#x2F; 线段覆盖"></a>凌乱的yyy &#x2F; 线段覆盖</h3><p>links： <a href="https://www.luogu.com.cn/problem/P1803">https://www.luogu.com.cn/problem/P1803</a></p><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>快 noip 了，yyy 很紧张！</p><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>现在各大 oj 上有 $n$ 个比赛，每个比赛的开始、结束的时间点是知道的。</p><p>yyy 认为，参加越多的比赛，noip 就能考的越好（假的）。</p><p>所以，他想知道他最多能参加几个比赛。</p><p>由于 yyy 是蒟蒻，如果要参加一个比赛必须善始善终，而且不能同时参加 $2$ 个及以上的比赛。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行是一个整数 $n$，接下来 $n$ 行每行是 $2$ 个整数 $a_{i},b_{i}\ (a_{i}&lt;b_{i})$，表示比赛开始、结束的时间。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数最多参加的比赛数目。</p><h4 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0 2</span><br><span class="line">2 4</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><h5 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><ul><li>对于 $20%$ 的数据，$n \le 10$；</li><li>对于 $50%$ 的数据，$n \le 10^3$；</li><li>对于 $70%$ 的数据，$n \le 10^{5}$；</li><li>对于 $100%$ 的数据，$1\le n \le 10^{6}$，$0 \le a_{i} &lt; b_{i} \le 10^6$。</li></ul><p>解题思路：思路很简单<br>以结束时间进行排序，再进行贪心。遍历每个比赛，如果当前比赛的开始时间大于上一个比赛的结束时间，那么就可以比了。<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比赛结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数，用于按结束时间排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(Event a, Event b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.end &lt; b.end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    Event events[n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入比赛的开始和结束时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; events[i].start &gt;&gt; events[i].end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按结束时间排序</span></span><br><span class="line">    <span class="built_in">sort</span>(events, events + n, compare);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;           <span class="comment">// 记录最多能参加的比赛数</span></span><br><span class="line">    <span class="type">int</span> last_end_time = <span class="number">-1</span>;  <span class="comment">// 记录上一个选中比赛的结束时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 贪心选择不重叠的比赛</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (events[i].start &gt;= last_end_time) &#123;</span><br><span class="line">            <span class="comment">// 选择当前比赛</span></span><br><span class="line">            count++;</span><br><span class="line">            last_end_time = events[i].end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/eric000.github.io/2024/07/23/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
      <url>/eric000.github.io/2024/07/23/%E5%89%8D%E7%BC%80%E5%92%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>因果</title>
      <link href="/eric000.github.io/2024/07/21/%E5%9B%A0%E6%9E%9C/"/>
      <url>/eric000.github.io/2024/07/21/%E5%9B%A0%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>因果是世界上最切实际的理论，任何事情的发生或结束都有因果。<br>并且因果会超过时间、空间等一切，辩证求因，逐本溯源。</p><p>比如：有的女生会感到痛经，可能是因为前一段时间每天都吃雪糕，都喝冰水。当时可能没有什么影响，但是最后还是会显现出作用。</p><p>公园二十分钟的中医解释：<br>1.公园里有绿植，木气更重一些，且木主生发<br>2.白天出门，能晒太阳，生发阳气，木气更有助于生发阳气。</p>]]></content>
      
      
      <categories>
          
          <category> 成长 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建过程</title>
      <link href="/eric000.github.io/2024/07/20/text/"/>
      <url>/eric000.github.io/2024/07/20/text/</url>
      
        <content type="html"><![CDATA[<p>        <span class="lazyload-img-span">        <img              data-src="https://raw.githubusercontent.com/Itsbaikai/eric000.github.io/main/images/blog_test.jpg" class="lazyload-img">        </sapn>      </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7.15</title>
      <link href="/eric000.github.io/2024/07/19/1111/"/>
      <url>/eric000.github.io/2024/07/19/1111/</url>
      
        <content type="html"><![CDATA[<p>痛苦本身是舒适区，积极情绪是习得的</p><p>希望每一次比赛和考试，都能以“以赛代练”的心态来完成</p><p>认知创造了你所栖息的那一层现实</p><p>推荐一本书《自控力》</p>]]></content>
      
      
      <categories>
          
          <category> 成长 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown测试</title>
      <link href="/eric000.github.io/2024/07/18/blog/"/>
      <url>/eric000.github.io/2024/07/18/blog/</url>
      
        <content type="html"><![CDATA[<h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>&#x3D;&#x3D;标记文本&#x3D;&#x3D;</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>图片:         <span class="lazyload-img-span">        <img              data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" class="lazyload-img">        </sapn>      </p><p>居中的图片:         <span class="lazyload-img-span">        <img              data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" class="lazyload-img">        </sapn>      </p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右</p><table><thead><tr><th align="center">第一列</th><th align="right">第二列</th><th align="left">第三列</th></tr></thead><tbody><tr><td align="center">第一列文本居中</td><td align="right">第二列文本居右</td><td align="left">第三列文本居左</td></tr></tbody></table><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>评论测试</title>
      <link href="/eric000.github.io/2024/07/17/First-blog/"/>
      <url>/eric000.github.io/2024/07/17/First-blog/</url>
      
        <content type="html"><![CDATA[<p>测试</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
